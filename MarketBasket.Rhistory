data.2 <- read.csv("~/Downloads/data-2.csv", header=FALSE)
View(data.2)
data.2 <- read.csv("~/Downloads/data-2.csv", header=TRUE)
table(item_0)
table(data.2)
library(arules)
install.packages(arules)
install.packages('library(arules)')
library('arules')
install.packages("arules")
install.packages("arulesViz")
str(data.2)
summary(data.2)
itemFrequencyPlot(data.2,topN=25,type='absolute')
itemFrequencyPlot(data.2,topN=20,type="absolute")
library(datasets)
itemFrequencyPlot(Groceries,topN=20,type="absolute")
library("arulesViz", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data("Groceries")
library(arules)
library(arulesViz)
R
library(datasets)
data("Groceries")
Trans <- read.transactions(data.2)
Trans <- read.transactions(data.2, encoding ="unknown")
Trans <- read.transactions(data.2, format = "basket", rm.duplicates = FALSE, cols = 1)
View(data.2)
Trans <- read.transactions("data-2.csv", format = "basket", rm.duplicates = FALSE, cols = 1, skip= 1)
Trans <- read.transactions(data.2, format = "basket", rm.duplicates = FALSE, cols = 1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, cols = 1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, cols = 1, skip= 1)
Trans
itemFrequencyPlot(Trans)
itemFrequencyPlot(Trans,type="absolute")
summary(Trans)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, skip= 1)
Trans
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, cols=1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE,sep="\n" cols=1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE,sep="," cols=1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, sep=",", cols=1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, sep=",", cols=1, skip= 1)
View(data.2)
data.2[,col_names] <- lapply(data.2[,col_names] , factor)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, sep=",", cols=1, skip= 1)
Trans <- read.transactions("data.csv", format = "basket", rm.duplicates = FALSE, sep=",", skip= 1)
Trans <- read.transactions("data.csv", format = "basket", sep=",", skip= 1, cols = 1)
lapply(data.2.id,factor)
lapply(data.2[,1],factor)
data.2[,1]<- lapply(data.2[,1],factor)
head(data.2)
View(`*tmp*`)
View(`*tmp*`)
data("Groceries")
Raw <- read.transactions('data.csv', sep = ",", format = "basket", cols = 1)
Raw <- read.transactions('data.csv', sep = ",", format = "basket", cols = 1, rm.duplicates = TRUE)
Raw <- read.transactions('data.csv', sep = ",", format = "basket", cols = 1, rm.duplicates = TRUE, skip=1)
Raw
Raw <- read.transactions('data.csv', sep = ",", format = "basket", rm.duplicates = TRUE, skip=1)
Raw
Raw <- read.transactions('data.csv', sep = ",", format = "basket", rm.duplicates = TRUE, skip=1, cols = 1)
itemFrequencyPlot(Raw, topN=20, type= "absolute")
Raw <- read.transactions('data.csv', sep = ",", format = "basket", rm.duplicates = TRUE, skip=1, cols = 1, header=TRUE)
Raw
Raw <- read.transactions('data.csv', sep = ",", format = "basket", rm.duplicates = TRUE, skip= 1, cols = 1)
Raw
Raw <- read.transactions('data.csv', sep = ",")
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE)
Raw
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=1)
Raw
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=1, skip = 1)
Raw
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=1)
Raw
summary(Raw)
Raw <- read.transactions('data.csv', sep = "\n", rm.duplicates=TRUE, cols=1)
Raw
summary(Raw)
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=1)
Raw
summary(Raw)
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=2)
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates=TRUE, cols=0)
Raw
summary(Raw)
Raw <- read.transactions('data.csv', sep = ",", rm.duplicates = TRUE, cols = 1, skip = 1)
inspect(Raw)
Raw <- read.transactions('data.csv', sep = ",", format = "basket")
Raw <- read.transactions('data.csv', sep = ",", format = "basket",skip = 1,cols = 1)
Raw <- read.transactions('data.csv', sep = ",", format = "basket",skip = 1,cols = 1,rm.duplicates = FALSE)
df<- read.csv("data.csv", sep="\n")
head(df)
Raw <- read.transactions(df, format="basket", sep=",", skip = 1)
Raw <- read.transactions(df, format="basket", sep=",", skip = 1, encoding = "unknown")
inspect(Raw)
summary(Raw)
Raw <- read.transactions(file = "data.csv", format="basket", sep=",", cols = 1, )
Raw <- read.transactions(file = "data.csv", format="basket", sep=",", cols = 1, rm.duplicates = TRUE)
Raw
head(Raw)
itemFrequencyPlot(Raw)
itemFrequencyPlot(Raw, topN = 10)
Raw <- read.transactions(file = "data.csv", format="basket", sep=",", cols = 1, rm.duplicates = TRUE, skip = 2)
Raw
Raw <- read.transactions(file = "data.csv")
Raw
inspect(Raw)
head(Raw)
itemFrequencyPlot(Raw, topN=25, type="absolute")
itemFrequencyPlot(Raw, topN=25, type="absolute")
Raw <- read.transactions(Raw, sep=",")
Raw <- read.transactions("data.csv", sep=",")
DF<- read.csv("data.csv",header = TRUE, sep =",")
head(DF)
Raw < - as(DF,"transactions")
DF$id<-as.factor(DF$id)
head(DF)
DF$item_0<-as.factor(DF$item_0)
DF$item_1<-as.factor(DF$item_1)
DF$item_2<-as.factor(DF$item_2)
DF$item_3<-as.factor(DF$item_3)
DF$item_4<-as.factor(DF$item_4)
str ='item_'
str
str+as.character(1)
str.append(as.character(1))
class(str)
p='1'
str+p
paste(str,p)
class(DF$item_0)
q<- paste(str,p)
q<- as.factor(q)
q
q<- paste(str,p,sep="")
q
i=1
paste(str,i,sep="")
str="item_"
for (i in 0:49)
{
cmd <- paste(str,i,sep="")
DF$(cmd) = as.factor(DF$(cmd))
}
str="item_"
for (i in 0:49)
{
cmd <- paste(str,i,sep="")
DF$(cmd) = as.factor(DF$(cmd))
DF[1,1]
for (i in 1:51)
{
DF[,i] = as.factor(DF[,i])
}
DF[5,25]
head(DF)
DF[1000,42]
Raw<- as(DF,"transactions")
head(Raw)
summary(Raw)
itemFrequencyPlot(Raw, topN=10, type= "absolute")
itemFrequencyPlot(Raw, topN=10, type= "absolute")
inspect(Raw)
summary(Raw)
summary(DF)
DF$item_0<- as.logical(DF$item_0)
DF[1,2]
for (i in 1:51)
{
DF[,i] = as.logical.factor(DF[,i])
}
DF[5,25]
head(DF)
DF<- read.csv("data.csv", sep=",")
head(DF)
DF[1,51]
DF[1,52]
DF[17,1]
DF$item_0<- as.logical(DF$item_0)
DF[5,2]
DF$item_0
for (i in 2:51)
{
DF[,i] = as.logical(DF[,i])
}
DF[5,25]
head(DF)
DF$id<- NULL
head(DF)
Raw <- as(DF,"transactions")
head(Raw)
summary(Raw)
itemFrequencyPlot(Raw, type="absolute", topN=25)
itemFrequencyPlot(Raw, type="absolute", topN=15)
source('~/Desktop/Practice/McKIntern/process.R')
source('~/Desktop/Practice/McKIntern/process.R')
itemFrequencyPlot(Raw, type="absolute", topN=45)
itemFrequencyPlot(Raw, type="absolute", topN=15)
100000*50
100000*50*0.0701566
density = 0.0701566
28326  + 28304  + 28302 +  28244 +  28167 + 209440
inspect(Raw[1:3])
itemFrequency(Raw[,1])
i_0<-itemFrequency(Raw[,1])
i_0*100000
itemFrequency(Raw[,1:6])
itemFrequencyPlot(Raw, support= 0.20)
itemFrequencyPlot(Raw, topN=5)
itemFrequencyPlot(Raw, topN=5, type="relative")
itemFrequencyPlot(Raw, topN=5, type="absolute")
itemFrequencyPlot(Raw, topN=5, type="relative")
itemFrequencyPlot(Raw, topN=15, type="relative")
rules <- apriori(Raw)
rules
rules <- apriori(Raw, paramter=list(support = 0.007,confidence=0.25, minlen=2))
rules <- apriori(Raw, parameter=list(support = 0.007,confidence=0.25, minlen=2))
rules
inspect(rules)
inspect(rules[1:5])
summary(rules)
inspect(sort(rules, by = "lift")[1:5])
inspect(rules, parameters=list(lhs>2))
inspect(rules, parameters=list(lhs+rhs>=3))
rules_1 <- apriori(Raw,parameter = list(supp=0.001, conf=0.15, minlen=3), appearance = list(rhs="item_2"))
rules_1
rules_1 <- apriori(Raw,parameter = list(supp=0.01, conf=0.15, minlen=3), appearance = list(rhs="item_2"))
rules_1
inspect(sort(rules_1, by = "lift")[1:10])
rules_1 <- apriori(Raw,parameter = list(supp=0.01, conf=0.15, minlen=3), appearance = list(default="lhs", rhs="item_2"), control = list(verbose=F))
inspect(rules_1[1:5])
inspect(rules_1[1:5])
inspect(rules_1)[1:5]
summary(rules_1)
inspect(rules)[1:5]
inspect(sort(rules, by ="confidence"))[1:5]
inspect(rules_1[1:5])
inspect(sort(rules, by = "lift")[1:5])
inspect(sort(rules, by = "confidence")[1:5])
source('~/Desktop/Practice/McKIntern/process.R')
inspect(sort(rules, by = "confidence")[1:10])
inspect(sort(rules, by = "confidence")[10:20])
inspect(sort(rules, by = "lift")[10:20])
inspect(sort(rules, by = "lift")[1:20])
inspect(sort(rules, by = "support")[1:20])
inspect(sort(rules, by = "confidence")[1:20])
inspect(sort(rules, by = "confidence")[21:30])
inspect(sort(rules, by = "confidence")[31:50])
inspect(sort(rules, by = "confidence")[51:70])
plot(rules, method='graph', interactive = TRUE, shading =NA )
library(arulesViz)
plot(rules, method='graph', interactive = TRUE, shading =NA )
summary(rules)
plot(rules, method='graph')
plot(rules, method='graph', interactive = TRUE)
plot(rules, method='graph', interactive = TRUE, size = "support", color="confidence")
rules_final<-apriori(Raw, parameter = list(support="0.1",confidence="0.9"))
rules_final<-apriori(Raw, parameter = list(support="0.1",confidence="0.9"), appearance = list(rhs='item_2'))
rules_final<-apriori(Raw, parameter = list(supp=0.1,conf=0.9), appearance = list(rhs='item_2'))
summary(rules_final)
inspect(rules_final)
inspect(rules_final)
rules_final<-apriori(Raw, parameter = list(supp=0.1,conf=0.85), appearance = list(rhs='item_2'))
subset.matrix <- is.subset(rules, rules)
redundant <- colSums(subset.matrix, na.rm=T) >= 1
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
rules.pruned <- rules[!redundant]
rules <- rules.pruned
summary(rules)
inspect(rules)
inspect(subset.matrix)
rules <- apriori(Raw)
inspect(rules_1)
plot(rules_1,method="graph")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_2","item_7","item_29")), control = list(verbose=F))
rules_1
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_1")), control = list(verbose=F))
rules_1
plot(rules_1, method="graph")
plot(rules_1, method="graph", shading="confidence")
plot(rules, method=NULL, shading="confidence")
plot(rules, method=NULL, shading="lift")
plot(rules, measure=c("support","lift"), shading="confidence")
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.25, minlen=3), control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.005, conf=0.25, minlen=3), control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.005, conf=0.25, minlen=3))
rules_2 <- apriori(Raw,parameter = list(supp=0.005, conf=0.25, minlen=3), control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.25, minlen=3))
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.5, minlen=3))
plot(rules_2,measure = c("support","lift"))
plot(rules_2,measure = c("support","lift"), shading = "confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3))
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=2))
plot(rules_1,measure = c("support","lift"), shading = "confidence")
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.5))
plot(rules_2,measure = c("support","lift"))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_1")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
plot(rules_1, method="graph", shading="confidence", interactive = TRUE)
library(tcltk)
install.packages(tcl/tk)
install.packages("tcltk2")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_9")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence", interactive = TRUE)
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_3")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_5")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_22")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_13")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_11")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.1, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_35")), control = list(verbose=F))
plot(rules_1, method="graph", shading="confidence")
rules_1 <- apriori(Raw,parameter = list(supp=0.05, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_35")), control = list(verbose=F))
rules_1
rules_1 <- apriori(Raw,parameter = list(supp=0.05, conf=0.70, minlen=3), appearance = list(default="lhs", rhs=c("item_4")), control = list(verbose=F))
rules
inspect(rules_1)
rules_1
rules_1 <- apriori(Raw,parameter = list(supp=0.01, conf=0.20, minlen=3), appearance = list(default="lhs", rhs=c("item_4")), control = list(verbose=F))
rules_1
rules_1 <- apriori(Raw,parameter = list(supp=0.05, conf=0.20, minlen=2), appearance = list(default="lhs", rhs=c("item_4")), control = list(verbose=F))
rules_1
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.25, minlen=3), appearance = list(default='lhs', rhs = 'item_13'),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.25, minlen=3),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.50, minlen=3),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.60, minlen=3),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.001, conf=0.80, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.005, conf=0.80, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.80, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.003, conf=0.80, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.80, minlen=2),control = list(verbose=F))
rules_2
inspect(rules_2)[450:460]
inspect(rules_2[450:460])
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.0025, conf=0.90, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_13"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_4"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_10"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_11"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_49"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2),control = list(verbose=F), appearance = list(default = "lhs", rhs="item_45"))
rules_2
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2))
inspect(rules_2[150:160])
inspect(rules_2[170:180])
inspect(rules_2[100:120])
inspect
rules_2 <- apriori(Raw,parameter = list(supp=0.002, conf=0.90, minlen=2))
savehistory("~/Desktop/Practice/MarketBssketAnalysis/MarketBasket.Rhistory")
